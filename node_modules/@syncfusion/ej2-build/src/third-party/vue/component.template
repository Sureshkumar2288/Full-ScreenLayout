import { ComponentBase, gh, getProps, isExecute, vueDefineComponent } from '@syncfusion/ej2-vue-base';
import { isNullOrUndefined, getValue } from '@syncfusion/ej2-base';{{modelImport}}

import { {{ComponentClass}} } from '{{packagepath}}';
{{childDirectiveImport}}

export const properties: string[] = ['isLazyUpdate', 'plugins', {{properties}}];
export const modelProps: string[] = [{{models}}];

export const testProp: any = getProps({props: properties});
export const props = testProp[0], watch = testProp[1], emitProbs: any = Object.keys(watch);
emitProbs.push('modelchanged', 'update:modelValue');
for (let props of modelProps) { emitProbs.push('update:'+props) }

{{componentComments}}
export let {{ComponentClass}}Component =  vueDefineComponent({
    name: '{{ComponentClass}}Component',
    mixins: [ComponentBase],
    props: props,
    watch: watch,
    emits: emitProbs,{{modelEvent}}
    provide() { return { custom: this.custom } },
    data() {
        return {
            ej2Instances: new {{ComponentClass}}({}) as any,
            propKeys: properties as string[],
            models: modelProps as string[],
            hasChildDirective: {{hasChildDirective}} as boolean,
            hasInjectedModules: {{dynamicModules}} as boolean,
            tagMapper: {{tagMapper}} as { [key: string]: Object },
            tagNameMapper: {{tagNameMapper}} as Object,
            isVue3: !isExecute as boolean,
            templateCollection: {} as any,
        }
    },
    created() {
{{triggerChange}}
        this.bindProperties();
        this.ej2Instances._setProperties = this.ej2Instances.setProperties;
        this.ej2Instances.setProperties = this.setProperties;
        this.ej2Instances.clearTemplate = this.clearTemplate;
        this.updated = this.updated;
    },
    render(createElement: any) {
        let h: any = !isExecute ? gh : createElement;
        let slots: any = null;
        if(!isNullOrUndefined((this as any).$slots.default)) {
            slots = !isExecute ? (this as any).$slots.default() : (this as any).$slots.default;
        }
        return h('{{tagName}}', slots);
    },
    methods: {
        clearTemplate(templateNames?: string[]): any {
            if (!templateNames){ templateNames = Object.keys(this.templateCollection || {}) }
            if (templateNames.length &&  this.templateCollection) {
                for (let tempName of templateNames){
                    let elementCollection: any = this.templateCollection[tempName];
                    if(elementCollection && elementCollection.length) {
                        for(let ele of elementCollection) {
                            let destroy: any = getValue('__vue__.$destroy', ele);
                            if (destroy) { ele.__vue__.$destroy() }
                            if (ele.innerHTML) { ele.innerHTML = '' }
                        }
                        delete this.templateCollection[tempName];
                    }
                }
            }
        },
        setProperties(prop: any, muteOnChange: boolean): void {
            if(this.isVue3) { this.models = !this.models ? this.ej2Instances.referModels : this.models }
            if (this.ej2Instances && this.ej2Instances._setProperties) {
                this.ej2Instances._setProperties(prop, muteOnChange);
            }
            if (prop && this.models && this.models.length) {
                Object.keys(prop).map((key: string): void => {
                    this.models.map((model: string): void => {
                        if ((key === model) && !(/datasource/i.test(key))) {
                            if (this.isVue3) {
                                this.ej2Instances.vueInstance.$emit('update:' + key, prop[key]);
                            } else {
                                (this as any).$emit('update:' + key, prop[key]);
                                (this as any).$emit('modelchanged', prop[key]);
                            }
                        }
                    });
                });
            }
        },{{modelTrigger}}
        custom(): void {
            this.updated();
        },
{{method}}
    }
});

export type {{ComponentClass}}Component = InstanceType<typeof {{ComponentClass}}Component>;

export const {{ComponentClass}}Plugin = {
    name: 'ejs-{{Component}}',
    install(Vue: any) {
        Vue.component({{ComponentClass}}Plugin.name, {{ComponentClass}}Component);
{{childDirectivePlugin}}
    }
}