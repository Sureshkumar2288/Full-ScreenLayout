/* jshint ignore:start */

let gulp = global.gulp = global.gulp || require('gulp');
let path = global.path = global.path || require('path');
let checker = require('accessibility-checker');
let fs = require('fs-extra');
const BASEPATH = process.env.INIT_CWD;
const CONFIGPATH = path.join(__dirname,'../../aceconfig.js');
const REPORTFILE = 'overall-report.json';

/**
 * Update accessibility file changes
 */
 gulp.task('update-accessibility-files', function (done) {
    try{
       // The chrome is not launching in linux OS https://github.com/puppeteer/puppeteer/issues/3698.
       // As per the guidelines of puppeteer https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#setting-up-chrome-linux-sandbox.
       // We need to change the following args while launching chrome in linux OS as a root user.
       // Second changes are need to open files in File Transfer Protocol linux.
       const ACFILEPATH = require.resolve('accessibility-checker/lib/ACBrowserManager.js');
       const STR1 = [`headless:`, `goto(URLorLocalFileorContent)`];
       const STR2 = [`args: ['--no-sandbox','--disable-setuid-sandbox'], headless:`, `goto('file://' + URLorLocalFileorContent, { waitUntil: ['load', 'domcontentloaded', 'networkidle0', 'networkidle2'] })`];
       replaceStringInFile(ACFILEPATH, STR1[0], STR2[0]);
       replaceStringInFile(ACFILEPATH, STR1[1], STR2[1]);
    } catch (error){
        if (error)
           printError('Gulp task for accessibility files update', error);
    }
   done();
});

/**
 * Test & generate Accessibility report
 */
gulp.task('accessibility', async function() {
    const inputPath = path.join(BASEPATH, './demos/accessibility');
    const outputPath = path.join(BASEPATH, 'accessibility-reports');
    const inputFile = 'default.html';
    const configFile = 'aceconfig.js';
    const summaryFile = 'summary.html';
    const componentConfigPath = path.join(BASEPATH, 'config.json');
    let directoryArray, percentageArray, prevStatus, prevresult, componentConfig, accessPercent;

    try {

        // Get the Accessibility Previous Overall Report from JSON file
        if (fs.existsSync(path.join(outputPath, REPORTFILE))) {
            prevStatus = fs.readFileSync(path.join(outputPath, REPORTFILE));
            if (prevStatus !== null && prevStatus !== undefined && prevStatus.length > 0) {
                prevresult = JSON.parse(prevStatus, 'utf8');
            }
        }

        // Delete 'accessibilityreports' existing directory 
        if (fs.existsSync(outputPath)) { fs.emptyDirSync(outputPath); }

        // Check input files & config are exist
        if (!fs.existsSync(CONFIGPATH) || !fs.existsSync(inputPath))
            throw ('Warning: Add accessibility input or config files in this path.\n '+inputPath);

        // Copy aceconfig file to root folder
        fs.copyFileSync(CONFIGPATH, configFile);
        // Get list of default.html files inside input folder
        directoryArray = getAllFiles(inputPath, outputPath, [], '', '', inputFile);
        // Generate accessibility reports inside Accessibility-reports folder
        percentageArray = await generateAccessibilityReport(directoryArray, outputPath, configFile, inputPath, prevresult);

        // Delete aceconfig from root folder
        if (fs.existsSync(configFile)) fs.removeSync(configFile);

        if (fs.existsSync(outputPath) && percentageArray) {
            // Generate percentage JSON file inside Accessibility-reports folder 
            fs.writeFile(path.join(outputPath, REPORTFILE), JSON.stringify(percentageArray, null, 4), 'utf8', function(err) {
                if (err) { throw ('Error: An error occured while writing Object to JSON File.'); }
            });
            // Generate summary HTML file inside Accessibility-reports folder 
            fs.writeFile(path.join(outputPath, summaryFile), returnHTML(JSON.stringify(percentageArray.files)), 'utf8', function(err) {
                if (err) { throw ('Error: An error occured while writing content to HTML File.'); }
            });
        }
		
        if (fs.existsSync(componentConfigPath)) {
            componentConfig = fs.readFileSync(componentConfigPath);
            componentConfig = JSON.parse(componentConfig, 'utf8');
        }

    } catch (error) {
        if (error)
            printError('Gulp task', error);
    }

    // Check accessibility percentage is lesser & throws error in console.
    if (percentageArray && percentageArray.files) {
        let errorDetails = "";
        let files = percentageArray.files;
        for (let i = 0; i < files.length; i++) {
            let filePath = files[i].location;
            let accessPercent = 85;
            let filePercent = parseFloat(percentageArray.files[i]['percentage']);
            //Get the accessibility percentage from component config file.
            if (componentConfig && componentConfig['accessibilityConfig'] && Object.keys(componentConfig['accessibilityConfig']).length) {
                accessPercent = componentConfig['accessibilityConfig'].hasOwnProperty(filePath) ? componentConfig['accessibilityConfig'][filePath] : accessPercent;
            }
            // If the accessibility file percentage value is less than the mentioned percentage in the config file, then CI will fail.
            // Or if the accessibility file percentage value is less than 85%, then CI will fail.
            if (filePercent < parseFloat(accessPercent) || filePercent < parseFloat(85)) {
                errorDetails += '\n Accessibility percentage is less than ' + accessPercent + '%. Check the reports in following file.\n ' + outputPath + "/" + filePath;
            }
        }
        if (errorDetails.length !== 0) {
            printError('Gulp task', errorDetails, true);
        }
    }
});

/**
 * Generate list of file URL's to run Accessibility test
 * @param {string} inDirPath - Input file directory Path
 * @param {string} outDirPath - Output file directory Path
 * @param {string} arrayOfFiles - Contains list of file URL's
 * @param {string} loc - Current directory path
 * @param {string} fName - Current directory name
 * @param {string} inputFile - Name of the file to test
 * @returns {string[]} - Array of file URL's for Accessibility test
 */
const getAllFiles = function(inDirPath, outDirPath, arrayOfFiles, loc, fName, inputFile) {
    try{
        files = fs.readdirSync(inDirPath)
        arrayOfFiles = arrayOfFiles || [];

        files.forEach(function(file) {
            if (fs.statSync(inDirPath + '/' + file).isDirectory()) {
                getAllFiles(inDirPath + '/' + file, outDirPath + '/' + file, arrayOfFiles, fName + '/' + file, file, inputFile)
            } else if (fName && loc && file === inputFile) {
                arrayOfFiles.push([
                    path.join(inDirPath, file),
                    path.join(outDirPath),
                    fName,
                    loc
                ])
            }
        })
        return arrayOfFiles;
    }catch(error){
        if(error)
            printError('getAllFiles', error);
    }
}

/**
 * Perform Accessibility test & generate reports 
 * @param {string[]} directoryArray - Contains list of URL for the file to test accessibility
 * @param {string} outputPath - Output path of Accessibility test result
 * @param {string} configFile - Accessibility-Checker config file name
 * @param {string} inputPath - Input file directory Path
 * @param {string} prevresult - Has previous overall-report JSON (Optional)
 * @returns {object} - Percentage object of each components Accessibility test
 */
async function generateAccessibilityReport(directoryArray, outputPath, configFile, inputPath, prevresult) {
    let percentArray = {},
        percent,
        fileArray = [],
        sum = [0, 0, 0, 0];
    percentArray.summary = {};

    try {

        // Import the Accessibility Checker config file
        const modules = require(path.join(BASEPATH, configFile));

        if (!directoryArray || !directoryArray.length > 0)
            throw ('Error : No files to load at location\n    ' + inputPath);

        for (data of directoryArray) {
            if (fs.existsSync(data[0])) {
                // Change output folder for each file in config
                modules.outputFolder = data[1];
                // Generate Accessibility report
                await checker.getCompliance(data[0], data[2]);
                // Gererate percentage of each output file
                percent = calcPercentage(outputPath, data[3], data[2]);
                // Calculate sum for each output values to store in JSON file
                for (let i = 0; i < percent.length; i++)
                    sum[i] += Number(percent[i]);
                // Replace the following content in file location data based on OS environment
                if(process.platform === "win32")
                data[1] = data[1].replace(outputPath + "\\", '').split('\\').join('/');
                else
                data[1] = data[1].replace(outputPath + "/", '').split('/').join('/');
                // Store the each file report data in JSON
                fileArray.push({
                    'filename': data[2] || null,
                    'location': data[1] + '/' + 'default.html' || null,
                    'percentage': percent[0] + '%' || null,
                    'pass': percent[1] || null,
                    'violation': percent[2] || null,
                    'potentialviolation': percent[3] || null,
                    'status': percent[0] > 80 ? 'success' : 'danger' || null
                });
            }
        }
        // Store Accessibility Previous Overall Report in JSON
        if (prevresult)
            percentArray.summary.prevOverallStatus = prevresult.summary.currentOverallStatus

        // Store Accessibility Current Overall Report in JSON
        percentArray.summary.currentOverallStatus = {
            'percentage': (sum[0] / directoryArray.length).toFixed(2) + '%' || null,
            'pass': sum[1] || null,
            'violation': sum[2] || null,
            'potentialviolation': sum[3] || null,
        }

        percentArray.files = fileArray;

        //set summary output directory & close checker
        modules.outputFolder = outputPath;
        checker.close();

        return percentArray;

    } catch (error) {
        if (error) {
            printError('generateAccessibilityReport', error);
        }
    }
}

/**
 * Calculate Percentage using each component result
 * @param {string} outputPath - Output path of results
 * @param {string} cName - Component name
 * @param {string} fName - Input file name
 * @returns {integer} - Percentage of each components Accessibility test
 */
function calcPercentage(outputPath, cName, fName) {
    try{
        const json = require(path.join(`${outputPath}/${cName}/${fName}.json`));
        var t = [],
            n = json.results.filter(function(e) { return 'PASS' !== e.value[1]; }),
            r = n.filter(function(e) { return 'VIOLATION' === e.value[0] && 'FAIL' === e.value[1]; });
        t.push(r.length);
        var o = n.filter(function(e) { return 'VIOLATION' === e.value[0] && 'POTENTIAL' === e.value[1]; });
        t.push(o.length);
        var l = n.filter(function(e) { return 'RECOMMENDATION' === e.value[0]; });
        t.push(l.length);
        var a = r.concat(o).map(function(e) { return e.path.dom; }),
            i = Array.from(new Set(a));
        t.push(i.length);
        passResults = json.results.filter(function(result) { return result.value[1] === 'PASS'; });
        passXpaths = passResults.map(function(result) { return result.path.dom; });
        t[4] = Array.from(new Set(passXpaths)).length;
        return [(100 - (t[3] / t[4]) * 100).toFixed(0), json.summary.counts.pass, json.summary.counts.violation, json.summary.counts.potentialviolation];
    } catch (error) {
        if (error)
            printError('calcPercentage', error);
    }
}

/**
 * Replace the first occurence of the pattern in the inputFile
 * @param {string} filePath - Input file path
 * @param {string} pattern - String pattern that to be replaced in inputFile
 * @param {string} replaceString - String that need to replace inputFile
 */
function replaceStringInFile(filePath, pattern, replaceString) {
    try {
        if (fs.existsSync(filePath)) {
            const data = fs.readFileSync(filePath, 'utf8');
            if (data && pattern && replaceString && data.includes(pattern) && !data.includes(replaceString)) {
                fs.writeFileSync(filePath, data.replace(pattern, replaceString), 'utf8');
            }
        }
    } catch (error) {
        if (error)
            printError('replaceStringInFile', error);
    }
}

/**
 * Log the error details in a file & in console.
 * @param {string} functionName - function which throws error
 * @param {string} errorDetails - error details to log
 * @param {boolean} flag - flag value to throw or log the error in console.
 */
function printError(functionName, errorDetails, flag){ 
    try {
        let errorFilePath = './accessibility-reports/error.log';
        let errorString = `${(new Date()).toString().split('GMT')[0]}[${functionName}] ${errorDetails}\n\n`;
        if (!fs.existsSync(errorFilePath))
            errorString = '============ Accessibility Gulp task issues ============\n\n' + errorString;
        if (!fs.existsSync('./accessibility-reports')) fs.mkdirSync('./accessibility-reports');
        fs.appendFileSync(errorFilePath, errorString);
        if (flag) throw (errorString);
        else console.log(errorString);
    }
    catch (error) {
        if (error)
            if (flag) throw error
            else {
                console.log(`${errorDetails}\nError : Can't log the errors in error.log file.\n\n${error}`);
            }
    }
}

function returnHTML(fileArray) {
    return (`<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><title>Accessibility Report</title><meta name="viewport" content="width=device-width,initial-scale=1"><meta name="description" content="Accessibility Summary report of EJ2 Components"><meta name="author" content="Syncfusion"><link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet"><link href="https://cdn.syncfusion.com/ej2/20.2.36/ej2-base/styles/material.css" rel="stylesheet"><link href="https://cdn.syncfusion.com/ej2/20.2.36/ej2-grids/styles/material.css" rel="stylesheet"><link href="https://cdn.syncfusion.com/ej2/20.2.36/ej2-buttons/styles/material.css" rel="stylesheet"><link href="https://cdn.syncfusion.com/ej2/20.2.36/ej2-popups/styles/material.css" rel="stylesheet"><link href="https://cdn.syncfusion.com/ej2/20.2.36/ej2-navigations/styles/material.css" rel="stylesheet"><link href="https://cdn.syncfusion.com/ej2/20.2.36/ej2-dropdowns/styles/material.css" rel="stylesheet"><link href="https://cdn.syncfusion.com/ej2/20.2.36/ej2-lists/stylematerial.css" rel="stylesheet"><link href="https://cdn.syncfusion.com/ej2/20.2.36/ej2-inputs/styles/material.css" rel="stylesheet"><link href="https://cdn.syncfusion.com/ej2/20.2.36/ej2-calendars/styles/material.css" rel="stylesheet"><link href="https://cdn.syncfusion.com/ej2/20.2.36/ej2-splitbuttons/styles/material.css" rel="stylesheet"><style>.e-row[aria-selected=true] .e-customizedExpandcell{background-color:#e0e0e0}.e-grid.e-gridhover tr[role=row]:hover{background-color:#746d6d}.e-expand::before{content:'e5b8'}a:hover{text-decoration:underline;color:#0074d9}tbody{background-color:#dbf0b9}grid{-webkit-box-shadow:0 0 42px -7px rgba(0,0,0,.51);-moz-box-shadow:0 0 42px -7px rgba(0,0,0,.51);box-shadow:0 0 42px -7px rgba(0,0,0,.51)}a{color:#0074d9;text-decoration:none}p{font-size: 12px;}</style><script src="https://cdn.syncfusion.com/ej2/20.2.36/dist/ej2.min.js" type="text/javascript"></script></head><body><h3 class="text-center display-5">Accessibility Report</h3><div id="container" class="m-4"><p><strong>Note: </strong>The Accessibility files that meet the minimum percentage requirement will be in green.</p><div id="Grid" class="rounded"></div></div><!-- Templates --><script id="linktemplate" type="text/x-template"><div class="link"><a href='&dollar{location}'>&dollar{filename}/</a></div></script><script id="progresstemplate" type="text/x-template"><div class="progress"><div class="progress-bar bg-&dollar{status}" role="progressbar" style="width: &dollar{percentage}">&dollar{percentage}</div></div></script><script>var ele=document.getElementById("container");ele&&(ele.style.visibility="visible");window.onload=function myFunction(){var x=document.getElementById("js-licensing").style.display="none";};var data=${fileArray},grid=new ej.grids.Grid({dataSource:data,allowSorting:!0,columns:[{headerText:"FileName",template:"#linktemplate",textAlign:"left",width:130},{template:"#progresstemplate",textAlign:"center",width:100,headerText:"Percentage"},{field:"pass",headerText:"Pass Count",textAlign:"center",width:100},{field:"violation",headerText:"Violation Count",textAlign:"center",width:100},{field:"potentialviolation",textAlign:"center",headerText:"PotentialViolation Count",width:100}],aggregates:[{columns:[{type:"Sum",field:"potentialviolation",footerTemplate:"Sum: &dollar{Sum}"},{type:"Sum",field:"violation",footerTemplate:"Sum: &dollar{Sum}"},{type:"Sum",field:"pass",footerTemplate:"Sum: &dollar{Sum}"}]}]});grid.appendTo("#Grid")</script></body></html>`).replace(/&dollar/g, '$');
}

/* jshint ignore:end */
